<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式计算、云计算与大数据</title>
      <link href="/2019/12/02/fen-bu-shi-ji-suan-yun-ji-suan-yu-da-shu-ju/"/>
      <url>/2019/12/02/fen-bu-shi-ji-suan-yun-ji-suan-yu-da-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式计算、云计算与大数据"><a href="#分布式计算、云计算与大数据" class="headerlink" title="分布式计算、云计算与大数据"></a>分布式计算、云计算与大数据</h1><h2 id="分布式计算概述"><a href="#分布式计算概述" class="headerlink" title="分布式计算概述"></a>分布式计算概述</h2><h3 id="分布式计算"><a href="#分布式计算" class="headerlink" title="分布式计算"></a>分布式计算</h3><p>分布式系统：由若干通过网络互联的计算机组成的软硬件系统，且这些计算机互相配合以完成一个共同的目标  。</p><p>分布式计算：指在分布式系统上执行的计算。  是将一个大型计算任务分成很多部分分别交给其他的计算机处理，并将所有的计算结果合并为原问题的解决方案。</p><p>分布式计算的优缺点：</p><ul><li>优点：超大规模 、虚拟化、高可靠性 、通用性 、高可伸缩性 、按需服务 、极其廉价 、容错性。</li><li>缺点：多点故障、安全性。</li></ul><h3 id="各种计算和云计算的区别"><a href="#各种计算和云计算的区别" class="headerlink" title="各种计算和云计算的区别"></a>各种计算和云计算的区别</h3><h4 id="网格计算"><a href="#网格计算" class="headerlink" title="网格计算"></a>网格计算</h4><p>网格计算：利用互联网把地理上广泛分布的各种资源（计算、存储、带宽、软件、数据、信息、知识等）连成一个逻辑整体，就像一台超级计算机一样，为用户提供一体化信息和应用服务（计算、存储、访问等） 。</p><p>网格计算和云计算的区别：</p><ul><li><p>网格计算强调资源共享，任何节点都可以请求使用其它节点的资源，任何节点都需要贡献一定资源给其他节点。</p></li><li><p>云计算强调专有，请求或获取的资源是专有的，并且由少数团体提供，使用者不需要贡献自己的资源。</p></li><li><p>网格计算侧重并行的计算集中性需求，并且难以自动扩展。</p></li><li><p>云计算侧重事务性应用，大量的单独的请求，可以实现自动或半自动的扩展。</p></li></ul><h4 id="分布式计算-1"><a href="#分布式计算-1" class="headerlink" title="分布式计算"></a>分布式计算</h4><p>分布式计算（狭义）：将待解决问题分成多个小问题，再分配给许多计算系统处理，最后将处理结果加以综合。把计算任务分派给网络中的多台独立的机器</p><p>优点：</p><ul><li>稀有资源可以共享 </li><li>通过分布式计算可以在多台计算机上平衡计算负载 </li><li>可以把程序放在最适合运行它的计算机上 </li></ul><p>云计算包含的分布式计算特征：</p><ul><li>通过资源调度和组合满足用户的资源请求</li><li>对外提供统一的、单一的接口</li></ul><h4 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h4><p>并行计算：是指同时使用多种计算资源解决计算问题的过程。通常指一个程序的多个部分同时运行于多个处理器上。把计算任务分派给系统内的多个运算单元</p><p>并行计算问题的特征：</p><ul><li>将工作分离成离散部分，有助于同时解决</li><li>随时并及时地执行多个程序指令（多条线同时运行）</li><li>多计算资源下解决问题的耗时要少于单个计算资源下的耗时</li></ul><p>云计算包含的并行计算特征：<br>用户资源（单一类型和组合类型）请求的同时处理</p><h4 id="对等计算"><a href="#对等计算" class="headerlink" title="对等计算"></a>对等计算</h4><p>对等计算系统中，每个节点都拥有对等的功能与责任，既可以充当服务器向其他节点提供数据或服务，又可以作为客户机享用其他节点提的供数据或服务，节点之间的交互可以是直接对等的，任何节点可以随时自由地加入或离开系统。有可能作为云计算的一个类型。</p><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><p>分布式系统：指通过网络互连，可协作执行某个任务的独立计算机集合。不共享内存或程序执行空间的一系列计算机被认为是相互独立的。</p><p>分布式系统的特征：</p><ul><li>可靠性：指一个分布式系统在它的某一个或多个硬件的软件组件造成故障时，仍能提供服务的能力。</li><li>可扩展性：指一个系统为了支持持续增长的任务数量可以不断扩展的能力。</li><li>可用性：指一个系统尽可能地限制系统因故障而暂停的能力。</li><li>高效性：指一个分布式系统通过分散的计算资源来实现任务执行的高效率。</li></ul><p>分布式计算的核心技术是进程间通信（interprocess communication，IPC），即在互相独立的进程（进程是程序的运行时表示）间通信及共同协作以完成某项任务的能力。<br>在分布式计算中，两个或多个进程按约定的某种协议进行IPC，此处协议是指数据通信各参与进程必须遵守的一组规则。在协议中，一个进程有些时候可能是发送者，在其他时候则可能是接收者。当一个进程与另一个进程进行通信时，IPC被称为单播（unicast）；当一个进程与另外一组进程进行通信时，IPC被称为组播（multicast）。</p><p>IPC程序接口的四种基本操作：</p><ul><li>发送（Send）。该操作由发送进程发起，旨在向接收进程传输数据。操作必须允许发送进程识别接收进程和定义待传数据。</li><li>接收（Receive）。该操作由接收进程发起，旨在接收发送进程发来的数据操作必须允许接收进程识别发送进程和定义保存数据的内存空间，该内存随后被接收者访问。</li><li>连接（Connect）。对面向连接的IPC，必须有允许在发起进程和指定进程间建立逻辑连击的操作：其中以进程发出请求连接操作而另一进程发出接受连接操作。</li><li>断开连接（Disconnect）。对面向连接的IPC，该操作允许通信的双方关闭先前建立起来的某一逻辑连接。</li></ul><h2 id="WEB原理与应用开发"><a href="#WEB原理与应用开发" class="headerlink" title="WEB原理与应用开发"></a>WEB原理与应用开发</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP是HyperText Transport Protocol（超文本传输协议）的缩写，它用于传送WWW方式的数据，是互联网上应用最为广泛的一种网络协议，下图为HTTP协议传输的网页。</p><p>HTTP协议发展史:</p><ul><li><p>HTTP/0.9：从1990年就已经用来作为WWW的传输协    议，当时非常简单，只支持GET方法，响应中携带    的消息必须HTML文件。已过时。只接受 GET 一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持 POST 方法，所以客户端无法向服务器传递太多信息。</p></li><li><p>HTTP/1.0:　1996发布RFC1945，这是第一个在通讯中指定版本号的HTTP 协议版本，至今仍被广泛采用，特别是在代理服务器中。</p></li><li><p>HTTP/1.1: 1997推出RFC2068，HTTP/1.1的标准。当前版本。持久连接被默认采用，并能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。</p></li><li><p>HTTP/1.1: 1999推出RFC2616，废弃了RFC2068标准。</p></li></ul><p>HTTP请求和响应</p><p>请求和响应结构由一个请求行/状态行、若干消息头、以及实体内容3个部分组成，其中的一些消息头和实体内容都是可选的，消息头和实体内容之间要用空行隔开。</p><p>请求行格式：</p><pre><code>请求行    格式：请求方式　资源路径　HTTP版本号&lt;CRLF&gt;    举例：GET /test.html HTTP/1.1     请求方式：POST、HEAD、OPTIONS、DELETE、TRACE、PUT </code></pre><p>请求行的方法有：</p><ul><li>GET    获取一个URL指定的资源,即资源实体</li><li>HEAD    获取一个指定资源的信息</li><li>POST    向服务器提交数据</li><li>PUT    向服务器提交资源</li><li>DELETE    请求源服务器删除Request-URI标识的资源</li><li>TRACE    网络跟踪</li><li>CONNECT    与PROXY之间的连接管理</li><li>OPTIONS    查询能力</li></ul><p>状态行格式：</p><pre><code>状态行    格式： HTTP版本号　状态码　原因叙述&lt;CRLF&gt;    举例：HTTP/1.1 200 OK</code></pre><p>状态行的状态有：</p><ul><li>100～199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程 。</li><li>200～299：表示成功接收请求并已完成整个处理过程 。</li><li>300～399：为完成请求，客户需进一步细化请求。例如，请求的资源已经移动一个新地址。</li><li>400～499：客户端的请求有错误。</li><li>500～599：服务器端出现错误。</li></ul><p>状态行的典型情况有：</p><ul><li>200（正常）：表示一切正常，返回的是正常请求结果。</li><li>206（部分内容）：客户发送了一个带有Range头（要求服务器只返回文档中的部分内容）的GET请求，服务器按要求完成了这个请求。 </li><li>302/307（临时重定向）：指出被请求的文档已被临时移动到别处，此文档的新的URL在Location响应头中给出。<br>304（未修改）：表示客户机缓存的版本是最新的，客户机应该继续使用它。</li><li>401（未经授权） ：表示客户机访问的是一个受口令和密码保护的页面，结合使用一个WWW-Authenticate响应头提示客户机应重新发出一个带有Authorization头的请求消息。 </li><li>404（找不到） ：服务器上不存在客户机所请求的资源。</li><li>500（内部服务器错误） ：服务器端的CGI、ASP、JSP等程序发生错误。</li></ul><p>HTTP消息头 ：</p><ul><li>使用消息头，可以实现HTTP客户机与服务器之间的条件请求和应答，消息头相当于服务器和浏览器之间的一些暗号指令。 </li><li>每个消息头包含一个头字段名称，然后依次是冒号、空格、值、回车和换行符。</li><li>消息头字段名是不区分大小写的，但习惯上将每个单词的第一个字母大写。</li><li>整个消息头部分中的各行消息头可按任何顺序排列。  </li><li>消息头又可以分为通用信息头、请求头、响应头、实体头等四类。</li><li>许多请求头字段都允许客户端在值部分指定多个可接受的选项，多个项之间以逗号分隔。</li><li>有些头字段可以出现多次。</li></ul><p>实体内容：</p><p>实体头用作实体内容的元信息，描述了实体内容的属性，包括实体信息类型、长度、压缩方法、最后一次修改时间、数据有效期等。</p><h3 id="Web会话"><a href="#Web会话" class="headerlink" title="Web会话"></a>Web会话</h3><p>WEB会话是指web客户端与服务器的一次连接、中间多次交互到最后断开的过程。由于HTTP协议是无状态的，因此需要会话跟踪技术管理客户端的多次请求的状态信息。会话（Session） 跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。</p><h4 id="Session技术"><a href="#Session技术" class="headerlink" title="Session技术"></a>Session技术</h4><p>Session是一种保存上下文信息的机制，它针对每一个用户，在服务器端开辟一块存储空间，用于存放用户的会话状态，通过SessionID区分不同的客户 </p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>Cookie是服务器发送给客户的片段信息，存储在客户端浏览器的内存中或硬盘上，之后在对服务器的请求中将其发回</p><h4 id="表单隐藏域"><a href="#表单隐藏域" class="headerlink" title="表单隐藏域"></a>表单隐藏域</h4><p>隐藏域是用来收集或发送信息的不可见元素，对于网页的访问者来说，隐藏域是看不见的。当表单被提交时，隐藏域就会将信息用你设置时定义的名称和值发送到服务器上</p><h4 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h4><p>URL重写是一种REST的相关技术，它可以在Web Server中，针对用户所提供的URL进行转换后，再传入Web Server中的程序处理器。</p><h3 id="Web开发发展的三个阶段"><a href="#Web开发发展的三个阶段" class="headerlink" title="Web开发发展的三个阶段"></a>Web开发发展的三个阶段</h3><h4 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h4><p>公共网关接口CGI(Common Gateway Interface) 是WWW技术中最重要的技术之一，有着不可替代的重要地位。CGI是外部应用程序（CGI程序）与Web服务器之间的接口标准，是在CGI程序和Web服务器之间传递信息的规程。 CGI（The Common Gateway Interface）是一个标准化的协议，能够使应用程序（通常称为CGI程序或CGI脚本）同web服务器和客户端进行交互。CGI程序能够用Python, PERL, Shell, C or C++等语言来实现。</p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><p>servlet是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><p>JSP是Java Server Pages的缩写，是由 Sun公司倡导、许多公司参与，于1999年推出的一种动态网页技术标准。JSP是基于Java Servlet以及整个Java体系的Web开发技术，利用这一技术可以建立安全、跨平台的先进动态网站，这项技术还在不断的更新和优化中。</p><h4 id="SSH框架"><a href="#SSH框架" class="headerlink" title="SSH框架"></a>SSH框架</h4><p>SSH（struts+spring+hibernate）是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用。</p><p>集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层(实体层)。</p><h5 id="Struts"><a href="#Struts" class="headerlink" title="Struts"></a>Struts</h5><p>MVC全名是Model View Controller，即模型、视图与控制器三个部分。MVC 架构的核心思想是:将程序分成相对独立，而又能协同工作的三个部分。通过使用 MVC 架构，可以降低模块之间的搞合，提供应用的可扩展性。另外， MVC 的每个组件只关心组件内的逻辑，不应与其他组件的逻辑混合。MVC 并不是 Java 所独有的概念，而是面向对象程序都应该遵守的设计理念。</p><p>分为三个部分：</p><ul><li>Controller是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li><li>Model是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</li><li>View是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</li></ul><p>Struts 是Apache 项目，Struts的前身是Craig R.McClanahan编写的JSP Model2 架构。Struts 在英文中是”支架、支撑”的意思，这表明了 Struts 在Web 应用开发中的巨大作用，采用 Struts 可以更好地遵循 MVC 模式。此外， Struts 提供了一套完备的规范，以及基础类库，可以充分利用 JSP/Servlet 的优点，减轻程序员的工作量，具有很强的可扩展性。Struts作为MVC模式的典型实现，对Model、 View和Controller都提供了对应的实现组件。</p><h5 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h5><p>Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。</p><p>Spring作为开源的中间件，独立于各种应用服务器，甚至无须应用服务器的支持，也能提供应用服务器的功能，如声明式事务等。Spring 致力于J2EE应用的各层的解决方案，而不是仅仅专注于某一层的方案。可以说Spring是企业应用开发的”一站式”选择，并贯穿表现层、业务层及持久层。然而，Spring并不想取代那些已有的框架，而与它们无缝地整合。</p><h5 id="hibernate"><a href="#hibernate" class="headerlink" title="hibernate"></a>hibernate</h5><p>ORM的全称是Object/Relation Mapping，对象/关系映射。ORM也可理解是一种规范，具体的 ORM 框架可作为应用程序和数据库的桥梁。基于ORM框架完成映射后，既可利用面向对象程序设计语言的简单易用性，又可利用关系数据库的技术优势。目前流行的ORM框架有产品有：Hibernate、iBATIS、EntityEJB等。</p><p>Hibernate是目前最流行的开放源代码的持久层框架，专注于数据库操作。使用Hibernate框架能够使开发人员从繁琐的SQL语句和复杂的JDBC中解脱出来。它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。</p><p>Hibernate是目前最流行的开源对象关系映射(ORM)框架。Hibernate采用低侵入式的设计，完全采用普通的Java对象(POJO)，而不必继承Hibernate 的某个超类或实现Hibernate的某个接口。因为Hibernate是面向对象的程序设计语言和关系数据库之间的桥梁，所以Hibernate允许程序开发者采用面向对象的方式来操作关系数据库。</p><h2 id="P2P原理与实践"><a href="#P2P原理与实践" class="headerlink" title="P2P原理与实践"></a>P2P原理与实践</h2><p>P2P，即Peer-to-Peer的缩写，也称“点对点”或“端对端”，学术上常称为“对等计算”。P2P是一种以非集中化方式使用分布式资源来完成一些关键任务的系统和应用。P2P与目前网络中占据主导地位的客户/服务器体系架构相对应。它表示分布式计算中各进程之间是一种对等的关系。</p><p>P2P使用的算法：</p><ul><li><p>P2P网络中，结点间通信就会牵扯到怎样在庞大的P2P网络中搜索到目标结点，这也是P2P应用的核心技术。早期的Gnutella采用的是基于完全随即图的Flooding（洪泛）搜索算法。Flooding算法会导致网络的可扩展性降低。</p></li><li><p>Chord算法中按结点ID大小排列成一个圆环，每个结点指针表中包含了部分结点的定位信息。当一个结点发出查询请求时，若结点ID小于请求资源ID，则将该结点的请求信息发送给下一个结点，依次传递，直到下一个结点拥有所需资源并返回为止。</p></li></ul><p>特点：非中心化、可扩展性、健壮性、高性价比、隐私保护、负载均衡。</p><p>P2P的广泛应用：文件共享下载、多媒体传输、即时通讯、协同工作、分布式数据存储、分布式对等计算、P2P搜索引擎。</p><p>P2P的发展历程：</p><ul><li><p>第一阶段，1999年至2000年左右，P2P技术由应用开发向学术研究发展。          当时P2P技术刚重返历史舞台，涌现出许多著名的P2P应用系统，但由于P2P存在安全、标准和版权等缺陷，多数应用都被扼杀。P2P技术的完善迫在眉睫，越来越多的学者开始研究P2P技术，旨在更好地应用它。</p></li><li><p>第二阶段，2001年至2003年左右，随着P2P技术的发展，开始从学术研究走向商业应用，许多体系和标准也不断完善。</p></li><li><p>第三阶段，2004年至今，P2P技术由广泛的共识到更加全面的实用。P2P网络的主要问题已解决，核心机制、整体框架已形成，在重大问题上也形成了共识。对P2P的应用更加注重细节、高效性和实用性，并试图整合不同的P2P应用系统。</p></li></ul><p>如今，随着云计算和大数据时代的到来，分布式计算得到更充分地应用，特别是以P2P为基础的分布式应用系统得到业界的热切关注。如P2P与Web Services结合，二者优势互补，使得Web服务的性能更加高效。</p><p>P2P网络拓扑结构划分：</p><ul><li>第一代P2P网络：中心化拓扑：是网络中资源和服务的索引都存储在中心服务器目录中，而资源和服务本身则存储在网络中的各结点中</li><li>第二代P2P网络：全分布式非结构化拓扑：的P2P网络是纯粹的没有中心服务器的网络，每个结点既是客户机又是服务器，是真正的对等关系。全分布式结构化拓扑：采用分布式散列表（Distributed Hash Table，简称DHT）来组织网络中的各结点，因此该拓扑结构的网络也称为DHT网络。</li><li>第三代P2P网络：半分布式拓扑：选择了性能较高的结点作为超级结点，在各个超级结点上存储其他部分结点的信息，检索算法仅在超级结点间转发，超级结点再将查询请求转发给适当的叶子结点。</li><li>第四代P2P网络：正在研究的P2P拓扑技术</li></ul><h2 id="云计算原理与技术"><a href="#云计算原理与技术" class="headerlink" title="云计算原理与技术"></a>云计算原理与技术</h2><h3 id="云计算概述"><a href="#云计算概述" class="headerlink" title="云计算概述"></a>云计算概述</h3><p>对一般用户而言：云计算是指通过网络以按需、易扩展的方式获得所需的服务。即随时随地只要能上网就能使用各种各样的服务，如同钱庄、银行、发电厂等。这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务。</p><p>对专业人员而言：是分布式处理、并行处理和网格计算的发展，或者说是这些计算机科学概念的商业实现。是指基于互联网的超级计算模式–即把原本存储于个人电脑、移动设备等个人设备上的大量信息集中在一起，在强大的服务器端协同工作。它是一种新兴的共享计算资源的方法，能够将巨大的系统连接在一起，以提供各种计算服务。</p><h3 id="云计算分类"><a href="#云计算分类" class="headerlink" title="云计算分类"></a>云计算分类</h3><h4 id="按云服务的对象"><a href="#按云服务的对象" class="headerlink" title="按云服务的对象"></a>按云服务的对象</h4><ul><li>公有云：面向外部用户需求，通过开放网络提供云计算服务。例如：IDC，GoogleApp，Saleforce在线CRM</li><li>私有云：大型企业按照云计算的架构搭建平台，面向企业内部需求提供云计算服务。例如：企业内部数据中心等</li><li>混合云：兼顾以上两种情况的云计算服务。例如：Amazon Web Server等既为企业内部又为外部用户提供云计算服务</li></ul><h4 id="按提供的服务类型"><a href="#按提供的服务类型" class="headerlink" title="按提供的服务类型"></a>按提供的服务类型</h4><h5 id="基础设施-IaaS"><a href="#基础设施-IaaS" class="headerlink" title="基础设施(IaaS)"></a>基础设施(IaaS)</h5><p>IaaS （ Infrastructure as a Service ）创建虚拟的计算、存储中心，使得其能够把计算单元、存储器、I/O设备、带宽等计算机基础设施，集中起来成为一个虚拟的资源池来对外提供服务。</p><p>典型应用：</p><ul><li>弹性计算云EC2 （Elastic Compute Cloud） ——计算</li><li>简单存储服务S3 （Simple Storage Service） —— 存储</li></ul><p>IaaS交付特点</p><ul><li>提供从计算到存储的统一资源基础架构</li><li>完整的系统级接入，按需布置安全域，负载均衡</li><li>按需付费，按容量控制</li><li>自由的应用环境</li></ul><p>IaaS的价值：降低运营成本、提高设备利用率、节能减排、保护现有投资，提供新商机</p><p>关键技术 ：</p><ul><li>虚拟化技术：解决资源灵活调度，提高资源利用率     </li><li>IT自动化技术：自动化的操作系统安装，升级和补丁管理；自动化应用软件的安装，配置；自动化应用部署      </li><li>Web门户技术：统一的用户门户和单点登录      </li><li>工作流管理：自动化服务的申请，审批流程   </li></ul><p>IaaS关键技术介绍：虚拟化技术</p><p>虚拟化是将底层物理设备与上层操作系统、软件分离的一种去耦合技术，其是基于开放的x86架构，将硬件、操作系统和应用程序一同装入一个可迁移的虚拟机档案文件中。虚拟化的目标是实现IT资源利用效率和灵活性的最大化。虚拟化技术在x86架构上比较通用，在RISC架构下比较封闭。</p><p>IaaS领域代表者——Amazon</p><p>作为大型的电子商务企业，积累了大规模IT系统设计和维护的技术与经验，同时面临着业务淡季时IT设备的闲置问题，于是将设备、技术和经验作为一种打包产品去为其他企业提供服务，利用闲置的IT设备来创造价值。Amazon的重点是提供弹性基础设施服务，其上的应用由用户灵活选择与决定。</p><h5 id="应用平台-PaaS"><a href="#应用平台-PaaS" class="headerlink" title="应用平台(PaaS)"></a>应用平台(PaaS)</h5><p>PaaS （ Platform as a Service）把服务器平台或开发环境作为一种服务提供</p><p>典型应用：</p><ul><li>salesforce.com 的 force.com</li><li>Google App Engine</li><li>800app ：不再需要任何编程即可开发包括企业管理软件</li></ul><p>PaaS的交付模型：</p><ul><li>计算资源平台做为一种服务提供给用户</li><li>可支持用户自有的工具与开发环境部署</li><li>客户通过可调用的接口拨接资源平台</li></ul><p>PaaS的价值：</p><ul><li>对服务提供商：灵活扩展业务，响应长尾需求，灵活调配资源</li><li>对开发者:加快开发速度，简化系统维护</li></ul><p>关键技术：</p><ul><li>分布式存储：采用冗余存储的方式来保证存储数据的可靠性，具有高吞吐率和高传输率的特点</li><li>分布式大规模数据管理：构建了弱一致性大规模数据库系统，能够高效的管理大数据集，能对海量的数据进行存储、读取以及高效分析</li><li>分布式编程环境：保证后台复杂的并行执行和任务调度向用户和编程人员透明，适用于编写松耦合、高度并行化的程序</li></ul><p>PaaS关键技术：分布式并行计算平台</p><p>业务能力：通过分布式并行计算算法，将众多性能一般的服务器的计算能力和存储能力充分发挥和聚合起来，能够为特定的应用提供海量数据处理能力。</p><p>业务形态：形成一个高效的软件应用开发和运行平台，吸引第三方软件开发者基于该平台进行软件开发和应用托管，同时聚集海量终端用户使用该平台上的各种应用。</p><p>目标客户群：第三方软件开发者，软件终端用户。</p><p>PaaS领域代表者——Google</p><p>为支持搜索引擎和邮件服务等需要海量数据处理能力的应用，开发了分布式并行技术的平台，在技术和经验有一定积累后，逐步将平台能力作为软件开发和交付的环境进行开放。Google构建的是新型的互联网分布式平台架构，传统的应用不能直接移植到该架构上。利用分布式存储（GFS）、分布式数据库（Bigtable）、分布式/并行计算（Mapreduce）、同步（Chubby）以及集群监控与调度技术（BORG）等实现统一高性价比的架构平台。</p><h5 id="应用软件-SaaS"><a href="#应用软件-SaaS" class="headerlink" title="应用软件(SaaS)"></a>应用软件(SaaS)</h5><p>SaaS （ Software as a Service）是一种基于互联网提供软件服务的应用模式。</p><p>特点：</p><ul><li>软件租赁：用户按使用时间和使用规模付费</li><li>软件租赁：用户按使用时间和使用规模付费</li><li>绿色部署：用户不需安装，打开浏览器即可运行</li><li>不需要额外的服务器硬件</li><li>软件（应用服务）按需定制</li></ul><p>SaaS的交付模型:</p><ul><li>应用程序做为一种服务来提供</li><li>由提供商进行统一维护管理</li><li>吸引广大的个人和中小企业用户</li><li>用户不需对软硬件进行维护工作</li><li>通过网络浏览器使用服务</li></ul><p>SaaS的价值</p><ul><li>提供灵活的租赁和付费方式</li><li>降低企业用户运营成本</li><li>降低中小企业信息化的门槛</li></ul><p>关键技术：</p><ul><li>统一身份认证和授权：解决多用户组织访问和管理的需求</li><li>服务计费：能根据使用情况进行灵活的计费 </li><li>Web2.0：基于互联网平台，通过互动，提供更好的信息展现和组织方式，创造更好用户体验</li><li>面向服务的架构（SOA）：将应用程序的不同功能单元（称为服务）通过标准的服务间接口联系起来，使业务应用能根据业务的需要变得更加灵活，以适应不断变化的环境</li></ul><p>SaaS技术分析</p><p>多租户技术：云计算要求硬件资源和软件资源能够更好地被共享，具有良好的伸缩性，任何一个用户都能够按照自己的需求进行客户化配置而不影响其他用户的使用。多租户技术就是云计算环境中能够满足上述需求的关键技术。</p><p>技术模式：</p><ul><li>用户可以使用按需定制的软件服务，按照定制软件的多少和时间付费</li><li>用户通过浏览器访问所需的服务，无需花费大量的精力用于IT设施的建设与维护</li></ul><p>承载平台：</p><ul><li>直接部署在底层物理资源上</li><li>部署在IaaS平台上</li><li>部署在PaaS平台上</li></ul><p>开发技术：</p><ul><li>在PaaS平台上开发并部署SaaS服务</li><li>在SOA （Service-Oriented Architecture，面向服务架构）架构下开发(soap、rest)</li></ul><p>意义：使软件提供成为一种互联网服务，降低用户使用软件应用的门槛。</p><p>SaaS领域的代表者——SaleForce</p><p>Salesforce的几个关键能力：</p><ul><li>强大的功能：第 20 代产品具有 1000 多种功能</li><li>灵活的定制：业界灵活度最高的 CRM 解决方案，用户可深度扩展，因此能满足各种规模的企业的需求<br>最佳的用户体验：方便易用，简洁的界面一目了然 </li><li>快速实施：多数公司在 30 天内把Salesforce 成功融合于企业运转之中 </li><li>快速回报：通常在实施后的几个月之内，客户即可获得可观的回报 </li><li>高度安全：为系统和数据提供了多层保护机制</li></ul><p>业务模式：</p><ul><li>业务能力：用户通过互联网获得所需的软件服务，无需花费大量的精力用于IT设施的建设与维护；</li><li>业务形态：软件作为一种互联网业务，用户通过互联网购买和使用其所需的软件服务，按照购买软件的类型、数量和时间进行付费</li><li>目标客户群：需要移动办公的政企用户，互联网公众用户</li></ul><h3 id="云计算关键技术"><a href="#云计算关键技术" class="headerlink" title="云计算关键技术"></a>云计算关键技术</h3><p>体系结构</p><p>云计算核心服务通常可以分为3 个子层：基础设施即服务层（IaaS, infrastructure as a service）、平台即服务层（PaaS, platform as a service）、软件即服务层（SaaS, software as a service）。</p><p>数据存储</p><ul><li>列存储：顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对某一列或者某几列的查询有非常大的IO优势。产品：Hbase、Cassandra、Hypertable。</li><li>文档存储：文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。产品：MongoDB、CouchDB。</li><li>key-value存储：可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。产品：Tokyo Cabinet/Tyrant、Berkeley DB、MemcacheDB、Redis。（Redis包含了其他功能）</li><li>图存储：图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。产品：Neo4J、FlockDB。</li><li>对象存储：通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。产品：db4o、Versant。</li><li>xml数据库：高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。产品：Berkeley DB、XML、BaseX。</li></ul><p>计算模型</p><p>云计算的计算模型是一种可编程的并行计算框架，需要高扩展性和容错性支持。MapReduce 是Google 提出的并行程序编程模型，运行于GFS 之上。它的设计思想在于将问题分而治之，首先将用户的原始数据源进行分块，然后分别交给不同的Map任务去处理。</p><p>资源调度</p><p>资源调度是云计算核心技术之一，它为云计算平台提供资源分配、任务调度等资源管理功能。通常云计算资源调度包括两个层面：一个是物理主机到虚拟机层面的资源分配（映射）；另一个是任务到虚拟机层面的调度（映射）。</p><p>虚拟化技术</p><p>虚拟化是云计算最重要的核心技术之一，它为云计算服务提供基础架构层面的支撑。虚拟化技术包括：服务器虚拟化、存储虚拟化、网络虚拟化、桌面虚拟化、应用虚拟化等</p><h3 id="Google云计算原理"><a href="#Google云计算原理" class="headerlink" title="Google云计算原理"></a>Google云计算原理</h3><p>Google云计算平台的几个关键技术</p><p>文件存储，Google File System，GFS</p><p>Google文件系统（英语：Google File System，缩写为GFS或GoogleFS），一种专有分布式文件系统，由Google公司开发，运行于Linux平台上。尽管Google在2003年公布了该系统的一些技术细节，但Google并没有将该系统的软件部分作为开源软件发布。</p><p>并行数据处理MapReduce</p><p>一个软件架构，是一种处理海量数据的并行编程模式，用于大规模数据集（通常大于1TB）的并行运算。</p><p>MapReduce实现了Map和Reduce两个功能：</p><ul><li>Map把一个函数应用于集合中的所有成员，然后返回一个基于这个处理的结果集。</li><li>Reduce对结果集进行分类和归纳。</li></ul><p>Map()和 Reduce() 两个函数可能会并行运行，即使不是在同一的系统的同一时刻。</p><p>结构化数据表BigTable</p><p>Bigtable是一个稀疏的、分布式的、多维度的、持久化存储的超级大表。每行包含一个可排序的行关键字，一个可选的时间戳以及一些可能有数据的列。BigTable会存储一系列的行记录，行记录有三个基本类型的定义：行关键字（Row Key）,时间戳（Time Stamp）,列（Column）。 </p><p>分布式锁Chubby</p><p>提供粗粒度的分布式锁，比如leader选举、服务发现。提供小数据的可靠存储重点关注可靠性、一致性、扩展性而不是性能，一致性依靠paxos解决。提供简单的语义。</p><h3 id="亚马逊云服务"><a href="#亚马逊云服务" class="headerlink" title="亚马逊云服务"></a>亚马逊云服务</h3><p>AWS提供一系列云计算服务，无疑要建立在一个强壮的基础存储架构之上，Dynamo是Amazon提供的一款高可用的分布式Key-Value存储系统，具备去中心化，高可用性，高扩展性的特点</p><p>Dynamo采用一致性哈希来完成数据分区。在一致性哈希中，哈希函数的输出范围为一个圆环，系统中每个节点映射到环中某个位置，而Key也被Hash到环中某个位置，Key从其被映射的位置开始沿顺时针方向找到第一个位置比其大的节点作为其存储节点。</p><p>亚马逊提供的云计算服务：</p><ul><li>弹性计算云EC2</li><li>简单存储服务S3</li><li>简单数据库服务Simple DB</li><li>简单队列服务SQS</li><li>弹性MapReduce服务</li><li>内容推送服务CloudFront</li><li>AWS导入/导出</li><li>关系数据库服务</li></ul><h2 id="云存储技术"><a href="#云存储技术" class="headerlink" title="云存储技术"></a>云存储技术</h2><h3 id="存储基本知识"><a href="#存储基本知识" class="headerlink" title="存储基本知识"></a>存储基本知识</h3><p>存储：</p><ul><li>封闭式系统的存储</li><li>开放式系统的存储<ul><li>内置存储</li><li>外挂存储<ul><li>Direct-Attached Storage直连式存储（DAS）：直接连接存储：存储设备是通过电缆（通常是SCSI接口电缆）直接连到服务器的。 I/O请求直接发送到存储设备</li><li>Fabric-Attached Storage网络存储（FAS）<ul><li>Network-Attached Storage网络接入存储（NAS）：网络 连接/附加/附属 存储：存储设备连接到现有的网络上，提供数据和文件服务，应用服务器直接把File I/O请求通过LAN传给远端NAS中的文件系统，NAS中的文件系统发起Block I/O到与NAS直连的磁盘。主要面向高效的文件共享任务，适用于那些需要网络进行大容量文件数据传输的场合。</li><li>Storage Area Network存储区域网络（SAN）：存储区域网络：它是一个用在服务器和存储资源之间的、专用的、高性能的网络体系。它为实现大量原始数据的传输而进行了专门的优化。</li></ul></li></ul></li></ul></li></ul><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>独立硬盘冗余阵列（RAID, Redundant Array of Independent Disks），旧称廉价磁盘冗余阵列（Redundant Array of Inexpensive Disks），简称磁盘阵列。利用虚拟化存储技术把多个硬盘组合起来，成为一个或多个硬盘阵列组，目的为提升性能或数据冗余，或是两者同时提升。</p><p>标准RAID：</p><ul><li>RAID0 ：Striped Disk Array without Fault Tolerance( 没有容错设计的条带磁盘阵列，以条带形式将RAID阵列的数据均匀分布在各个阵列中。总容量=(磁盘数量)*(磁盘容量)</li><li>RAID 1 ：以镜像作为冗余手段，虚拟磁盘中的数据有多个拷贝，放在成员磁盘上。总容量=(磁盘数量 / 2)*(磁盘容量) </li><li>RAID3 (条带分布+专用盘校验)：以xor校验为冗余方式，使用专门的磁盘存放校验数据， 虚拟磁盘上的数据块被分为更小的数据块并行传输到各个成员物理磁盘上 ，同时计算出xor校验数据存放到校验磁盘上。总容量=(磁盘数量 -1)*(磁盘容量) </li><li>RAID5 (条带技术+分布式校验)：以XOR检验为冗余方式，校验数据均匀分布在各个数据磁盘上，对各个数据磁盘的访问为异步操作。</li><li>RAID6：能够允许两颗磁盘同时失效的RAID级别系统。总容量=(磁盘数 -2)*(磁盘容量)</li></ul><p>混合RAID：</p><ul><li>RAID10 (镜像阵列条带化)：将镜像和条带组合起来的组合RAID级别，最低一级是RAID1镜像对，第二级为RAID0。总容量=(磁盘数 /2)*(磁盘容量)</li><li>RAID50定义：将镜像和条带组合起来的组合RAID级别，最低一级是RAID5镜像对，第二级为RAID0。总容量=(磁盘数 -1)*(磁盘容量)</li></ul><p>热备与重构：在线操作特性，系统中需设置一个热添加的备份盘或用一个新的替代磁盘替代故障磁盘，当满足以下条件时开始数据自动重构 ：1、有一个热备份盘存在独立于故障磁盘的2、 所有磁盘都配置为冗余阵列(RAID1，3，5，10)，所有的操作都是在不中断系统操作的情况下进行的。</p><p>逻辑卷快照：</p><p>用途(利用少量存储空间保存原始数据的备份）：</p><ul><li>文件、逻辑卷恢复</li><li>备份、测试、数据分析等</li></ul><p>基本概念：</p><ul><li>Base Volume ：快照源卷</li><li>Repository Volume ：快照仓储卷，保存快照源卷在快照过程中被修改以前的数据</li><li>Snapshot Volume ：快照卷</li></ul><p>某一个时间点的逻辑卷映像：</p><ul><li>逻辑上相当于整个Base Volume的拷贝</li><li>可将Sanpshot Volume分配给任何一台主机</li><li>Snapshot Volume可读取、写入或拷贝</li></ul><p>存储空间需求</p><ul><li>需要相当于Base Volume 20%的额外空间</li></ul><h3 id="云存储概念与技术原理"><a href="#云存储概念与技术原理" class="headerlink" title="云存储概念与技术原理"></a>云存储概念与技术原理</h3><p>云存储技术：</p><ul><li>存储虚拟化：<ul><li>分布式块存储</li><li>分布式文件存储</li><li>分布式对象存储</li><li>分布式表存储</li></ul></li><li>分布式存储：<ul><li>基于主机的存储虚拟化</li><li>基于网络的存储虚拟化</li><li>基于存储设备的存储虚拟化</li></ul></li></ul><p>存储类型：</p><ul><li>块存储：块存储将存储区域划分成固定大小的小块，是传统裸存储设备的存储空间对外暴露方式。块存储系统将大量磁盘设备通过SCSI/SAS或FC SAN与存储服务器连接，服务器直接通过SCSI/SAS或FC协议控制和访问数据。块存储方式不存在数据打包/解包过程，可提供更高的性能。<ul><li>直接附加存储DAS：直接附加存储DAS以主机为中心，将外部的数据存储设备通过SISC/IDE/ ATA等I/O总线直接连接到服务器上，使数据存储设备是服务器结构一部分</li><li>存储域网络SAN：SAN采用块数据组织，通过可伸缩的高速专用存储网络互连不同类型的存储设备和服务器，提供内部任意节点间多路可选择的数据交换。<ul><li>IP SAN</li><li>FC SAN</li></ul></li></ul></li><li>分布式文件存储：文件存储以标准文件系统接口形式向应用系统提供海量非结构化数据存储空间。分布式文件系统把分布在局域网内各个计算机上的共享文件夹集合成一个虚拟共享文件夹，将整个分布式文件资源以统一的试图呈现给用户。 它对用户和应用程序屏蔽各个节点计算机底层文件系统的差异，提供用户方便的管理资源的手段或统一的访问接口。<ul><li>网络附加存储NAS</li><li>Google文件系统GFS</li><li>Hadoop分布式文件系统</li></ul></li><li>对象存储：对象存储为海量非结构化数据提供Key-Value这种通过键-值查找数据文件的存储模式，提供了基于对象的访问接口，有效地合并了NAS和SAN的存储结构优势，通过高层次的抽象具有NAS的跨平台共享数据和基于策略的安全访问优点，支持直接访问具有SAN的高性能和交换网络结构的可伸缩性。<ul><li>Swift</li><li>BC-oNest</li><li>Amazon S3</li></ul></li><li>表存储：表存储系统用来存储和管理结构化/半结构化数据，向应用系统提供高可扩展的表存储空间，包括交易型数据库和分析型数据库。<ul><li>日志详单类存储</li><li>NoSQL存储<ul><li>BigTable</li><li>HBase</li><li>Cassandra</li><li>Mongodb</li></ul></li><li>OLTP关系数据库</li><li>OLAP数据仓库</li></ul></li></ul><h3 id="对象存储技术"><a href="#对象存储技术" class="headerlink" title="对象存储技术"></a>对象存储技术</h3><p>对象存储系统中，对象是数据存储的基本单元，Object维护自己的属性，从而简化了存储系统的管理任务，增加了灵活性，在存储设备中，所有对象都有一个对象标识，通过对象标识OSD命令访问该对象。对象存储就是实现对象具有高性能、高可靠性、跨平台以及安全的数据共享的存储体系，是块和文件之外的存储形式</p><p>对象存储系统组成：</p><ul><li>对象(Object)：包含了文件数据以及相关的属性信息，可以进行自我管理 </li><li>OSD（Object-based Storage Device)：一个智能设备，是Object的集合 </li><li>文件系统：文件系统运行在客户端上，将应用程序的文件系统请求传输到MDS和OSD上 </li><li>元数据服务器(Metadata Server，MDS)：系统提供元数据、Cache一致性等服务 </li><li>网络连接：网络连接是对象存储系统的重要组成部分。它将客户端、MDS和OSD连接起来，构成了一个完整的系统</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象是系统中数据存储的基本单位，每个Object是数据和数据属性集的综合体，数据属性可以根据应用的需求进行设置，包括数据分布、服务质量等。</p><ul><li>基本存储单元：<br>名字空间：对象ID</li><li>数据</li><li>元数据<ul><li>元数据类似于inode，描述了对象在磁盘上的块分布</li></ul></li><li>属性</li><li>根据需要而定义<ul><li>E.g. 多媒体对象的延迟和吞吐请求</li></ul></li></ul><h4 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h4><p>OSD（Object-based Storage Device)   每个OSD都是一个智能设备，具有自己的存储介质、处理器、内存以及网络系统等，负责管理本地的Object，是对象存储系统的核心。OSD同块设备的不同不在于存储介质，而在于两者提供的访问接口。 </p><p>OSD的主要功能包括数据存储和安全访问。目前国际上通常采用刀片式结构实现对象存储设备。</p><p>OSD提供三个主要功能：</p><ul><li>数据存储。OSD管理对象数据，并将它们放置在标准的磁盘系统上，OSD不提供块接口访问方式，Client请求数据时用对象ID、偏移进行数据读写。</li><li>智能分布。OSD用其自身的CPU和内存优化数据分布，并支持数据的预取。由于OSD可以智能地支持对象的预取，从而可以优化磁盘的性能。</li><li>每个对象元数据的管理。OSD管理存储在其上对象的元数据，该元数据与传统的inode元数据相似，通常包括对象的数据块和对象的长度。而在传统的NAS系统中，这些元数据是由文件服务器维护的，对象存储架构将系统中主要的元数据管理工作由OSD来完成，降低了Client的开销。</li></ul><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>文件系统对用户的文件操作进行解释，并在元数据服务器和OSD间通信，完成所请求的操作。<br>现有的应用对数据的访问大部分都是通过POSIX文件方式进行的，对象存储系统提供给用户的也是标准的POSIX文件访问接口。<br>接口具有和通用文件系统相同的访问方式，同时为了提高性能，也具有对数据的Cache功能和文件的条带功能。<br>同时，文件系统必须维护不同客户端上Cache的一致性，保证文件系统的数据一致 </p><h4 id="元数据服务器-Metadata-Server"><a href="#元数据服务器-Metadata-Server" class="headerlink" title="元数据服务器 (Metadata Server)"></a>元数据服务器 (Metadata Server)</h4><p>MDS控制Client与OSD对象的交互，主要提供以下几个功能：</p><ul><li>对象存储访问：MDS构造、管理描述每个文件分布的视图，允许Client直接访问对象。MDS为Client提供访问该文件所含对象的能力，OSD在接收到每个请求时将先验证该能力，然后才可以访问。</li><li>文件和目录访问管理：MDS在存储系统上构建一个文件结构，包括限额控制、目录和文件的创建和删除、访问控制等。</li><li>Client Cache一致性：为了提高Client性能，在对象存储系统设计时通常支持Client方的Cache。由于引入Client方的Cache，带来了Cache一致性问题，MDS支持基于Client的文件Cache，当Cache的文件发生改变时，将通知Client刷新Cache，从而防止Cache不一致引发的问题。</li></ul><h2 id="大数据技术与实践"><a href="#大数据技术与实践" class="headerlink" title="大数据技术与实践"></a>大数据技术与实践</h2><h3 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h3><p>大数据的“大”是相对而言的，是指所处理的数据规模巨大到无法通过目前主流数据库软件工具，在可以接受的时间内完成抓取、储存、管理和分析，并从中提取出人类可以理解的资讯。</p><p>业界普遍认同大数据具有4个 V特征(数据量大Volume、变化速度快Velocity、多类型Variety与高价值Value)。简而言之，大数据可以被认为是数据量巨大且结构复杂多变的数据集合。</p><ul><li>第一个特征Volume是大数据的首要特征，数据体量巨大。当今世界需要进行及时处理以提取有用信息的数据数量级已经从TB级别，跃升到PB甚至EB级别。</li><li>第二个特征Variety：数据类型繁多。大数据的挑战不仅是数据量的大，也体现在数据类型的多样化。除了前文提到的网络日志、地理位置信息等具有固定结构的数据之外，还有视频、图片等非结构化数据。</li><li>第三个特征Velocity：处理速度快。信息的价值在于及时，超过特定时限的信息就失去了使用的价值。</li><li>最后一个特征是Value：商业价值高，但是价值密度低。单个数据的价值很低，只有大量数据聚合起来处理才能借助历史数据预测未来走势，体现出大数据计算的价值所在。</li></ul><h3 id="大数据存储平台"><a href="#大数据存储平台" class="headerlink" title="大数据存储平台"></a>大数据存储平台</h3><h4 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h4><p>HDFS（全称Hadoop Distributed File System）原是Apache开源项目Nutch的组件，现在成为是Hadoop的重要组件，它是一款具有高容错性特点的分布式文件系统，它被设计为可以部署在造价低廉的主机集群上。它将一个大文件拆分成固定大小的小数据块，分别存储在集群的各个节点上。因此HDFS可以存储超大的数据集和单个巨大的文件。这样的分布式结构能够进行不同节点的并行读取，提高了系统的吞吐率。同一个数据块存储在不同的数据节点上，保证了HDFS在节点失败时还能继续提供服务，使其具有了容错性。</p><h4 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h4><p>Apache HBase是运行于Hadoop平台上的数据库，它是可扩展的、分布式的大数据储存系统。HBase可以对大数据进行随机而实时的读取和写入操作。它的目标是在普通的机器集群中处理巨大的数据表，数据表的行数和列数都可以达到百万级别。受到Google Bigtable 思想启发，Apache开发出HBase, HBase是一个开源的、分布式的、数据多版本储存的、面向列的大数据储存平台。Google的Bigtable是运行于GFS（Google File System）上的，而HBase是运行与Apache开发的Hadoop平台上。</p><h4 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h4><p>Cassandra是社交网络理想的数据库，适合于实时事务处理和提供交互型数据。以Amazon的完全分布式的Dynamo为基础，结合了Google BigTable基于列族（Column Family）的数据模型，P2P去中心化的存储，目前twitter和digg中都有使用。在CAP特性上(CAP即Consistnecy 一致性，Avaliability 可用性，Partition-tolerance分区容忍性)，HBase选择了CP，Cassandra更倾向于AP，而在一致性上有所减弱。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis是一种面向“键/值”对类型数据的分布式NoSQL数据库系统，特点是高性能，持久存储，适应高并发的应用场景。Redis是一个支持持久化的内存数据库(与Memcache类似),也就是说redis需要经常将内存中的数据同步到磁盘来保证持久化。整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库 数据flush到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。</p><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p>MongoDB 是一个面向集合的，模式自由的文档型数据库。在数据库里每个聚集有一个唯一的名字，可以包含无限个文档。聚集是RDBMS中表的同义词，区别是聚集不需要进行模式定义。</p><h3 id="大数据计算模式"><a href="#大数据计算模式" class="headerlink" title="大数据计算模式"></a>大数据计算模式</h3><h4 id="PRAM"><a href="#PRAM" class="headerlink" title="PRAM"></a>PRAM</h4><p>PRAM模型，即并行随机存取机，也称之为SIMD-SM(共享存储的单指令流多数据流)模型，是一种应用于并行计算抽象模型｡PRAM模型是顺序的冯·诺伊曼存储程序模型的自然扩展，由若干具有本地存储器的处理器和一个具有无限容量的共享存储器组成，处理器由公共的时钟进行控制,以同步方式运行。</p><h4 id="BSP"><a href="#BSP" class="headerlink" title="BSP"></a>BSP</h4><p>BSP(Bulk Synchronous Parallel)模型，由哈佛大学Viliant和牛津大学Bill McColl提出，希望像冯·诺伊曼体系结构那样，架起计算机程序语言和体系结构间的桥梁，故又称作桥模型(Bridge Model)。本质上，BSP模型是分布存储的MIMD计算模型，被认为是最有前途的并行计算模型。</p><h4 id="LogP"><a href="#LogP" class="headerlink" title="LogP"></a>LogP</h4><p>LogP模型是一种分布存储的、点到点通信的多处理机模型。</p><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>MapReduce是Google公司提出的一种用于大规模数据集（大于1TB）的并行运算的编程模型。</p><h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><p>Spark 是一种与 Hadoop 相似的而又强于Hadoop的开源集群计算环境，由加州大学伯克利分校 AMP 实验室开发。Spark 启用了内存分布数据集，除了能够提供交互式查询外，它还可以优化迭代工作负载。</p><h4 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h4><p>RDD提供了一个抽象的数据架构，我们不必担心底层数据的分布式特性，而应用逻辑可以表达为一系列转换处理。通常应用逻辑是以一系列Transformation和Action来表达的。在执行Transformation中原始RDD是不变而不灭的，Transformation后产生的是新的RDD。</p><h3 id="大数据分析处理平台"><a href="#大数据分析处理平台" class="headerlink" title="大数据分析处理平台"></a>大数据分析处理平台</h3><h4 id="Cloudera-Impala"><a href="#Cloudera-Impala" class="headerlink" title="Cloudera Impala"></a>Cloudera Impala</h4><p>Impala是CDH（Cloudera Distribution with Apache Hadoop）的一个组件，是一个对大量数据并行处理（MPP-Massively Parallel Processing）的查询引擎。</p><h4 id="HadoopDB"><a href="#HadoopDB" class="headerlink" title="HadoopDB"></a>HadoopDB</h4><p>HadoopDB旨在结合MapReduce的可扩展性优势和并行数据库的性能、效率优势，以管理和分析大数据。HadoopDB背后的基本思想是，连接多个单节点数据库系统 (PostgreSQL)，使用 Hadoop 作为任务协调者和网络通信层；查询用 SQL 表达，但是其执行是使用 MapReduce 框架跨节点并行化的，以便将单一查询工作尽可能推送到相应的节点数据库中。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广泛应用的算法</title>
      <link href="/2019/11/19/guang-fan-ying-yong-de-suan-fa/"/>
      <url>/2019/11/19/guang-fan-ying-yong-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="广泛应用的算法"><a href="#广泛应用的算法" class="headerlink" title="广泛应用的算法"></a>广泛应用的算法</h1><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><blockquote><p>散列函数——将输入映射到数字。（无论你给它什么数据，它都还给你一个数字。）</p></blockquote><p>必须满足的要求：</p><ul><li>它必须是一致的。</li><li>它应将不同的输入映射到不同的数字。</li></ul><blockquote><p>散列表（散列映射、映射、字典和关联函数）——结合使用散列函数和数组创建。</p></blockquote><p>平均情况的性能O(1)常量时间，最糟情况O(n)。</p><p>散列表的查找、插入和删除速度都非常快。</p><p>散列表的创建：</p><ul><li>建立一个空数组。</li><li>将一个数据输入散列函数，散列函数输出一个数字，将数据保存到数组的索引数字处。</li><li>假设要知道这个数据，把它输入到散列函数中，得到一个索引数字，则可以从数组得到数据内容。</li></ul><p>必须满足的要求：</p><ul><li>散列函数总是将同样的输入映射到相同的索引。</li><li>散列函数将不同输入映射到不同的索引。</li><li>散列函数知道数组有多大。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriceOfGroceries</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// an apple costs 67 cents</span>        book<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">0.67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// milk costs $1.49</span>        book<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"milk"</span><span class="token punctuation">,</span> <span class="token number">1.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"avocado"</span><span class="token punctuation">,</span> <span class="token number">1.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {apple=0.67, avocado=1.49, milk=1.49}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>散列表适用于：</p><ul><li>模拟映射关系。</li><li>防止重复。</li><li>缓存/记住数据，以免服务器再通过处理来生成它们。</li></ul><p>好的散列表的特性：</p><ul><li>冲突较少，应该使用最大限度减少冲突的散列函数。</li><li>一旦填装因子超过0.7，就该调整散列表长度。</li></ul><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><blockquote><p>广度优先搜索——指出是否有A到B的路径，如果有，将找出最短路径。</p></blockquote><p>运行时间为O(顶点数+人数)，通常写作O(V+E)</p><p>面临类似于寻找最短路径的问题时，可以尝试使用图来建立模型，再使用广度优先搜索来解决问题。</p><blockquote><p>图由节点（node）和边（edge）组成。</p></blockquote><ul><li><p>有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。</p></li><li><p>无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约会，而rachel也与ross约会”。</p></li></ul><p>队列和栈的区别：</p><ul><li><p>队列是先进先出（FLFO）的。</p></li><li><p>栈是后进先出（LIFO）的</p></li></ul><p>你需要按加入顺序检查搜索列表的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</p><p>对于检查过的人，务必不要再去检查，否则可能导致无限循环。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreadthFirstSearch</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> searchQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// This list is how you keep track of which people you've searched before.</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> searched <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>searchQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String person <span class="token operator">=</span> searchQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Only search this person if you haven't already searched them</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searched<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">person_is_seller</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token operator">+</span> <span class="token string">" is a mango seller!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    searchQueue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Marks this person as searched</span>                    searched<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">person_is_seller</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"alice"</span><span class="token punctuation">,</span> <span class="token string">"bob"</span><span class="token punctuation">,</span> <span class="token string">"claire"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bob"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"anuj"</span><span class="token punctuation">,</span> <span class="token string">"peggy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"alice"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"peggy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"claire"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"thom"</span><span class="token punctuation">,</span> <span class="token string">"jonny"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"anuj"</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"peggy"</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"thom"</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jonny"</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><p>用于每条边都有关联数字的图，这些数字称为权重。</p><p>带权重的图称为加权图，不带权重的图称非加权图。</p><p>计算非加权图中的最短路径，可使用广度优先搜索。</p><p>计算加权图中权重为正的最短路径，可使用狄克斯特拉算法。</p><p>计算加权图中权重为负的最短路径，可使用贝尔曼-福德算法。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DijkstrasAlgorithm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// the graph</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">>></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> processed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">findLowestCostNode</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Double lowestCost <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>        String lowestCostNode <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Go through each node</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> node <span class="token operator">:</span> costs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Double cost <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If it's the lowest cost so far and hasn't been processed yet...</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cost <span class="token operator">&lt;</span> lowestCost <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>processed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ... set it as the new lowest-cost node.</span>                lowestCost <span class="token operator">=</span> cost<span class="token punctuation">;</span>                lowestCostNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lowestCostNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// graph.put("a", new HashMap&lt;>());</span>        <span class="token comment" spellcheck="true">// graph.get("a").put("fin", 1.0);</span>        <span class="token comment" spellcheck="true">// graph.put("b", new HashMap&lt;>());</span>        <span class="token comment" spellcheck="true">// graph.get("b").put("a", 3.0);</span>        <span class="token comment" spellcheck="true">// graph.get("b").put("fin", 5.0);</span>        <span class="token comment" spellcheck="true">// graph.put("fin", new HashMap&lt;>());</span>        <span class="token comment" spellcheck="true">// The costs table</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> costs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        costs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        costs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        costs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fin"</span><span class="token punctuation">,</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// the parents table</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fin"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        String node <span class="token operator">=</span> <span class="token function">findLowestCostNode</span><span class="token punctuation">(</span>costs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Double cost <span class="token operator">=</span> costs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Go through all the neighbors of this node</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> neighbors <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String n <span class="token operator">:</span> neighbors<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span> newCost <span class="token operator">=</span> cost <span class="token operator">+</span> neighbors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// If it's cheaper to get to this neighbor by going through this node</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>costs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">></span> newCost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// ... update the cost for this node</span>                    costs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> newCost<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// This node becomes the new parent for this neighbor.</span>                    parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Mark the node as processed</span>            processed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Find the next node to process, and loop</span>            node <span class="token operator">=</span> <span class="token function">findLowestCostNode</span><span class="token punctuation">(</span>costs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cost from the start to each node:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>costs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 5, b: 2, fin: 6 }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="K最近邻算法"><a href="#K最近邻算法" class="headerlink" title="K最近邻算法"></a>K最近邻算法</h2><p>KNN用于分类和回归，需要考虑最近的邻居。</p><p>KNN是进入机器学习的的领路人，如OCR（光学字符识别）、语音识别和人脸识别都是基于KNN。</p><p>度量两者有多像，可以计算两者的距离，可使用毕达哥拉斯公式（两点之间的距离公式）。也可以使用余弦相似度，比较它们的角度。</p><p>分类就是编组。</p><p>回归就是预测结果（数字）。</p><p>特征抽取意味着将物品（如水果或用户）转换为一系列可比较的数字。</p><p>能否挑选合适的特征事关KNN算法的成败。</p><h2 id="简要介绍其他算法"><a href="#简要介绍其他算法" class="headerlink" title="简要介绍其他算法"></a>简要介绍其他算法</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>将数据插入到数组的正确位置，无需在插入之后排序。为了解决这个问题产生了二叉查找树。</p><p>运行原理：</p><ul><li>对于二叉查找树而言，其中每一个节点，左子节点的值比它小，右子节点的值都比它大。</li><li>要查找一个节点，首先检查根节点，比根节点大的话，检查右边的节点，否则检查左边的节点。以此类推直到找到需要的节点。</li></ul><p>平均运行时间为O(log n)，最糟运行时间O(n)。它的平均查找时间和数组差不多，但插入和删除比数组快的多。但不能随机访问。</p><p>处于平衡状态的特殊二叉查找树，红黑树。</p><p>B树是一种特殊的二叉树，数据库常用它来存储数据。</p><h3 id="反向索引"><a href="#反向索引" class="headerlink" title="反向索引"></a>反向索引</h3><p>一个散列表，将单词映射到包含它的页面。这种数据结构被称为反向索引，常用于创建搜索引擎。</p><h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>傅里叶变换非常适合用于处理信号。可使用它来压缩音乐和图片，还可以用来预测地震、DNA分析和音乐识别。</p><h3 id="并行算法"><a href="#并行算法" class="headerlink" title="并行算法"></a>并行算法</h3><p>并行算法是为了提高算法速度，在多内核中并行执行，但对速度的提升并非线性的，因为有俩个问题并行性管理开销和均衡负载。如果要改善性能和扩展性，并行算法可能是不错的。</p><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>分布式算法是一种特殊的并行算法，它非常适合于在短时间内完成海量工作。MapReduce是一种流行的分布式分布式算法，它基于两个简单的理念：映射函数和归并函数。</p><h3 id="布隆过滤器和HyperLogLog"><a href="#布隆过滤器和HyperLogLog" class="headerlink" title="布隆过滤器和HyperLogLog"></a>布隆过滤器和HyperLogLog</h3><p>布隆过滤器解决了散列表非常大，要从中判断是否包含一个元素。布隆过滤器是一种概率型的数据结构，它提供的答案有可能不对，但很可能是正确的。它占用的存储空间很少，它非常适合用于不要求答案绝对准确的情况。</p><p>HyperLogLog是一种类似布隆过滤器的算法，它近似的计算集合中的不同的元素数，它给出不能准确的答案，但也八九不离十，而占用的内存空间却少得多。</p><h3 id="SHA-算法"><a href="#SHA-算法" class="headerlink" title="SHA 算法"></a>SHA 算法</h3><p>SHA（安全散列算法）是一个散列函数，它生成一个散列值——一个较短的字符串。它可以用来判断两个文件是否相同还可以在不知到原始字符串的情况下对其进行比较如密码。SHA实际上是一系列算法：SHA-0、SHA-1、SHA-2和SHA-3。最安全的密码散列函数是bcrypt。</p><h3 id="局部敏感的散列算法"><a href="#局部敏感的散列算法" class="headerlink" title="局部敏感的散列算法"></a>局部敏感的散列算法</h3><p>SHA是局部不敏感的，如你有一个字符串，计算了其散列值，如果你修改一个字符，再计算散列值，结果将截然不同。</p><p>如果你希望散列函数是局部敏感的，可以使用Simhash，如果你对字符做细微的修改，Simhash生成的散列值也只有细微的差别。它可以让你通过比对散列值来判断两个字符串的相似程度。可以用于搜索引擎判断网页是否已搜集，论文是否从网上抄的，是否上传有版权的内容。</p><h3 id="Diffie-Hellman-密钥交换"><a href="#Diffie-Hellman-密钥交换" class="headerlink" title="Diffie-Hellman 密钥交换"></a>Diffie-Hellman 密钥交换</h3><p>Diffie-Hellman算法解决了双方无需知道加密算法和要破解加密的消息比登天还难，它使用两个钥匙：公钥和私钥。公钥是公开的，他人可以使用公钥来加密数据，只有你的私钥才能解密。Diffie-Hellman算法及其代替者RSA依然被广泛使用。</p><h3 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h3><p>线性规划用于在给定约束条件下最大限度地改善指定的指标。图算法是其子集，它是一个宽泛的多是框架，它使用Simplex算法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题解决技巧</title>
      <link href="/2019/11/18/wen-ti-jie-jue-ji-qiao/"/>
      <url>/2019/11/18/wen-ti-jie-jue-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h1><h2 id="分而治之-1"><a href="#分而治之-1" class="headerlink" title="分而治之"></a>分而治之</h2><blockquote><p>分而治之（divide and conquer，D&amp;C）——一种著名的递归式问题解决方法。</p></blockquote><p>使用D&amp;C解决问题的过程包括两个步骤：</p><ul><li>找出基线条件，这种条件必须尽可能的简单。</li><li>不断将问题分解（或这说缩小规模），直到符合基线条件。</li></ul><blockquote><p>适用于这小块地的最大方块，也是适用于整块地的最大方块。（欧几里德算法）</p></blockquote><p>示例代码（sum递归版本）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveSum</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基线条件；这个最先开始返回</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归条件；copyOfRange（）将指定数组的指定范围复制到新数组中</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例代码（Max递归版本）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveMax</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> subMax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> subMax <span class="token operator">?</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> subMax<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写涉及数组的递归函数时，基线条件通常是数组为空或只包含一个元素。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序的过程：</p><ol><li><p>从数组中选择一个元素，这个元素被称为基准值（pivot）。</p></li><li><p>找出比基准值小的元素和比基准值大的元素。（partitioning（分区））</p></li><li><p>如果数组是有序的，就可以像下面这样合并得到一个有序的数组：左边的数组+基准值+右边的数组。否则就对两边的数组进行快速排序（递归）。返回到1继续直到变成有序数组。</p></li></ol><blockquote><p>归纳条件是一种证明算法行之有效的方式，它分两步：基线条件和归纳条件。它于D&amp;C协调发挥作用。</p></blockquote><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quicksort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">quicksort</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 3, 5, 10]</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">quicksort</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// base case, arrays with 0 or 1 element are already "sorted"</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// recursive case</span>            Integer pivot <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// sub-array of all the elements less than the pivot</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> less <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>el <span class="token operator">-</span><span class="token operator">></span> el <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// sub-array of all the elements greater than the pivot</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> greater <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>el <span class="token operator">-</span><span class="token operator">></span> el <span class="token operator">></span> pivot<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                    <span class="token function">quicksort</span><span class="token punctuation">(</span>less<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pivot<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">quicksort</span><span class="token punctuation">(</span>greater<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在谈大O表示法"><a href="#在谈大O表示法" class="headerlink" title="在谈大O表示法"></a>在谈大O表示法</h2><p>在大O表示法O(n)中，n实际上指的是这样的。</p><p>c*n</p><p>c是算法所需的固定时间量，被称为常量。</p><p>通常不考虑这个常量，因为如果两种算法的大O运行时间不同，这种常量将无关紧要。</p><p>排序算法有：</p><ul><li>选择排序，运行时间为O(n^2)，速度非常慢。</li><li>合并排序，运行时间为O(n log n),比选择排序快的多。</li><li>快速排序，最糟情况下，运行时间为O(n^2)。平均情况下，运行时间为O(n log n)比合并排序快，因为其常量更小。</li></ul><p>O(n)里的n是调用桟的层数和每层运行时间的乘积。例如，快速排序在最糟情况下调用桟的层数是O(n)层每层的运行时间为O(n)，则最糟情况下的运行时间为O(n)*O(n)即O(n^2)。</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote><p>动态规划先解决子问题，再逐步解决大问题。</p></blockquote><p>动态规划的要点：</p><ul><li>需要在给定约束条件下优化某种指标时，动态规划很有用。</li><li>问题可分解为离散子问题时，可使用动态规则来解决。</li><li>每种动态规则解决方案都涉及网格。</li><li>单元格中的值通常就是你要优化的值。</li><li>每个单元哥都是一个子问题，因此你需要考虑如何将问题分解为子问题。</li><li>没有放之四海而皆准的计算动态规则解决方案的公式。</li></ul><h1 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h1><h2 id="贪婪算法-1"><a href="#贪婪算法-1" class="headerlink" title="贪婪算法"></a>贪婪算法</h2><blockquote><p>贪婪算法——每步都采取最优的做法。（每步都选择局部最优解，最终得到的就是全局最优解。）</p></blockquote><blockquote><p>近似算法可以得到非常接近的解，如果获得精确解需要的时间太长，可以使用它。</p></blockquote><p>判断近似算法的优劣的标准如下：</p><ul><li>速度有多快。</li><li>得到的近似解与最优解的接近程度。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetCovering</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> statesNeeded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"mt"</span><span class="token punctuation">,</span> <span class="token string">"wa"</span><span class="token punctuation">,</span> <span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"nv"</span><span class="token punctuation">,</span> <span class="token string">"ut"</span><span class="token punctuation">,</span> <span class="token string">"ca"</span><span class="token punctuation">,</span> <span class="token string">"az"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">>></span> stations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kone"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"nv"</span><span class="token punctuation">,</span> <span class="token string">"ut"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ktwo"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"wa"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"mt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kthree"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"nv"</span><span class="token punctuation">,</span> <span class="token string">"ca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kfour"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"nv"</span><span class="token punctuation">,</span> <span class="token string">"ut"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kfive"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ca"</span><span class="token punctuation">,</span> <span class="token string">"az"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> finalStations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>statesNeeded<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String bestStation <span class="token operator">=</span> null<span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> statesCovered <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">>></span> station <span class="token operator">:</span> stations<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> covered <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>statesNeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>                covered<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>covered<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> statesCovered<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bestStation <span class="token operator">=</span> station<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    statesCovered <span class="token operator">=</span> covered<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            statesNeeded<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>statesCovered<span class="token operator">:</span><span class="token operator">:</span>contains<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bestStation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                finalStations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bestStation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalStations<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ktwo, kone, kthree, kfive]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="NP完全问题"><a href="#NP完全问题" class="headerlink" title="NP完全问题"></a>NP完全问题</h2><blockquote><p>NP完全问题——以难解著称的问题。</p></blockquote><p>对于NP完全问题，还没有找到快速解决的方案。</p><p>面临NP完全问题时，最佳的做法是使用近似算法。</p><p>贪婪算法易于实现、运行速度快，是不错的近似算法。</p><p>判断问题是不是NP完全问题：</p><ul><li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。</li><li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题。</li><li>如果涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。</li><li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题解决技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础</title>
      <link href="/2019/11/15/suan-fa-ji-chu/"/>
      <url>/2019/11/15/suan-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h1><blockquote><p>算法是一组完成任务的指令。</p></blockquote><p>算法的要点：</p><ul><li>算法的速度指的并非时间，而是操作数的增速。</li><li>谈论算法的速度时，我们说的是随输入的增加，其运行时间的将以什么样的速度增加。</li><li>算法的运行时间用大O表示法表示。</li><li>算法的运行时间并不以秒为单位。</li><li>算法运行时间是从其增速的角度度量的。</li></ul><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote><p>二分查找是一种算法，其输入是一个<strong>有序的列表</strong>。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回null。</p></blockquote><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组的下标丛0开始</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1/2=0 </span>            <span class="token keyword">int</span> guess <span class="token operator">=</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">==</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除中间值，往左退一格</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除中间值，往右进一格</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>myList<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>myList<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><blockquote><p>大O表示法指出了算法有多快。</p></blockquote><p>假设列表包含n个元素。简单查找需要检查每个元素，因此需要执行n次操作。使用大O表示法，这个运行时间为O(n)。</p><p>一般而言，大O表示法像下面这样。</p><p>O(n)</p><p>O是大O，n指操作数。</p><p>大O表达法指出了<strong>最糟糕</strong>情况下的运行时间。</p><p>大O表示法让你能够比较操作数，它指出了算法的运行时间的增速。</p><p>常见的大O运行时间(顺序是从快到慢)：</p><ul><li>O(log n) ,也叫对数时间，这样的算法包括二分查找。O(log n)比O(n)快，当需要搜索的元素越多时，前者比后者快的多。二分查找的速度比简单查找快的多。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n*log n)，这样的算法包括快速排序——一种速度较快的排序算法。</li><li>O(n^2)，这样的算法包括选择排序——一种速度较慢的排序算法。</li><li>O(n!)，这样的算法包括旅行商问题——一种非常慢的算法。</li></ul><h2 id="数组和列表"><a href="#数组和列表" class="headerlink" title="数组和列表"></a>数组和列表</h2><blockquote><p>需要存储多项数据时，有两种基本方式——数组和列表。</p></blockquote><ul><li><p>数组中所有元素在内存中是相连的(紧靠在一起的)。同一个数组中，元素类型都必须相同。</p></li><li><p>链表中的元素可存储在内存的任何地方(每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址川在一起)。</p></li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ul><li><p>链表读取随机元素(除第一个元素和最后一个)不能直接读取，因为不知道地址，必须先访问第一个元素，从中得到第二个元素以此类推，直到找到那个元素。</p></li><li><p>链表需要读取所有元素时，效率很高。但需要时跳跃，链表的效率很低。</p></li><li><p>数组知道其中每个元素的地址，所以需要读取随机元素时效率很高。</p></li><li><p>访问方式有两种随机访问和顺序访问。数组是前者，链表是后者。因为很多情况都要求随机访问，因此数组用的很多。</p></li></ul><h3 id="在中间插入"><a href="#在中间插入" class="headerlink" title="在中间插入"></a>在中间插入</h3><ul><li><p>链表，插入元素很简单，只需要修改它前面的那个元素指向的地址。</p></li><li><p>数组，必须将后面的元素都向后移。</p></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>链表，只需要修改前一个元素指向地址即可。</li><li>数组，删除元素后，必须将后面的元素都向前移。</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>选择排序是一种灵巧的算法，但其速度不是很快。</p></blockquote><p>示例代码(列表)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> smallest <span class="token operator">=</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            newArr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smallest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>smallest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> smallest <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> smallestIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> smallest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                smallest <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                smallestIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> smallestIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[2, 3, 5, 6, 10]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例代码(数组)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this version uses raw arrays instead of ArrayList</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> smallestIndex <span class="token operator">=</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>smallestIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> <span class="token function">getNewArrWithoutSmallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> smallestIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNewArrWithoutSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> smallestIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArrWithoutSmallest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> smallestIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                newArrWithoutSmallest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> smallestIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                newArrWithoutSmallest<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newArrWithoutSmallest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> smallestIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> smallest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                smallestIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> smallestIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 3, 5, 6, 10]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><blockquote><p>递归指的是调用自己的函数。</p></blockquote><p>基线条件和递归条件：</p><p>递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Countdown</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// base case</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">countdown</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈有两种操作：压入和弹出。</p><p>所以函数调用都进入调用栈。</p><p>用于存储多个函数的变量的栈，称为调用栈。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Greet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">greet2</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"how are you, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok bye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">greet2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getting ready to say bye..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">"adit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>递归调用栈</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factorial</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用栈可能很长，这将占用大量的内存。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/01/hello-world/"/>
      <url>/2019/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2019/10/15/ce-shi/"/>
      <url>/2019/10/15/ce-shi/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
